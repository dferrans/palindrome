# AUTOGENERATED FILE
FROM balenalib/raspberrypi4-64-ubuntu:xenial-run

ENV NODE_VERSION 13.12.0
ENV YARN_VERSION 1.22.4

RUN buildDeps='curl' \
	&& set -x \
	&& for key in \
	6A010C5166006599AA17F08146C2130DFD2497F5 \
	; do \
		gpg --keyserver pgp.mit.edu --recv-keys "$key" || \
		gpg --keyserver keyserver.pgp.com --recv-keys "$key" || \
		gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "$key" ; \
	done \
	&& apt-get update && apt-get install -y $buildDeps --no-install-recommends \
	&& rm -rf /var/lib/apt/lists/* \
	&& curl -SLO "http://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-arm64.tar.gz" \
	&& echo "9c28226e84bd44f7309ffdd4deb022fb59479ef0386e82890cd19b02162940f3  node-v$NODE_VERSION-linux-arm64.tar.gz" | sha256sum -c - \
	&& tar -xzf "node-v$NODE_VERSION-linux-arm64.tar.gz" -C /usr/local --strip-components=1 \
	&& rm "node-v$NODE_VERSION-linux-arm64.tar.gz" \
	&& curl -fSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz" \
	&& curl -fSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz.asc" \
	&& gpg --batch --verify yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz \
	&& mkdir -p /opt/yarn \
	&& tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/yarn --strip-components=1 \
	&& ln -s /opt/yarn/bin/yarn /usr/local/bin/yarn \
	&& ln -s /opt/yarn/bin/yarn /usr/local/bin/yarnpkg \
	&& rm yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz \
	&& npm config set unsafe-perm true -g --unsafe-perm \
	&& rm -rf /tmp/*

CMD ["echo","'No CMD command was set in Dockerfile! Details about CMD command could be found in Dockerfile Guide section in our Docs. Here's the link: https://balena.io/docs"]

 RUN curl -SLO "https://raw.githubusercontent.com/balena-io-library/base-images/8accad6af708fca7271c5c65f18a86782e19f877/scripts/assets/tests/test-stack@node.sh" \
  && echo "Running test-stack@node" \
  && chmod +x test-stack@node.sh \
  && bash test-stack@node.sh \
  && rm -rf test-stack@node.sh
  ##################################
  #############INSTALL PYTHON DEPS ###
RUN apt-get purge -y python.*
ENV LANG C.UTF-8

RUN apt-get update && apt-get install -y --no-install-recommends \
		ca-certificates \
		netbase \
	&& rm -rf /var/lib/apt/lists/*
  RUN gpg --keyserver keyring.debian.org --recv-keys 4DE8FF2A63C7CC90 \
  	&& gpg --keyserver keyserver.ubuntu.com --recv-key 6E3CBCE93372DCFA \
  	&& gpg --keyserver keyserver.ubuntu.com --recv-keys 0x52a43a1e4b77b059

  ENV PYTHON_VERSION 3.6.10

  # if this is called "PIP_VERSION", pip explodes with "ValueError: invalid truth value '<VERSION>'"
  ENV PYTHON_PIP_VERSION 19.3.1

  ENV SETUPTOOLS_VERSION 41.6.0

  RUN set -x \
  	&& buildDeps=' \
  		curl \
  	' \
  	&& apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/* \
  	&& curl -SLO "http://resin-packages.s3.amazonaws.com/python/v$PYTHON_VERSION/Python-$PYTHON_VERSION.linux-aarch64-openssl1.0.tar.gz" \
  	&& echo "a47138482d845647ec561908d8f81d83311e0818ecf251dd2df385c15f0c036e  Python-$PYTHON_VERSION.linux-aarch64-openssl1.0.tar.gz" | sha256sum -c - \
  	&& tar -xzf "Python-$PYTHON_VERSION.linux-aarch64-openssl1.0.tar.gz" --strip-components=1 \
  	&& rm -rf "Python-$PYTHON_VERSION.linux-aarch64-openssl1.0.tar.gz" \
  	&& ldconfig \
  	&& if [ ! -e /usr/local/bin/pip3 ]; then : \
  		&& curl -SLO "https://raw.githubusercontent.com/pypa/get-pip/430ba37776ae2ad89f794c7a43b90dc23bac334c/get-pip.py" \
  		&& echo "19dae841a150c86e2a09d475b5eb0602861f2a5b7761ec268049a662dbd2bd0c  get-pip.py" | sha256sum -c - \
  		&& python3 get-pip.py \
  		&& rm get-pip.py \
  	; fi \
  	&& pip3 install --no-cache-dir --upgrade --force-reinstall pip=="$PYTHON_PIP_VERSION" setuptools=="$SETUPTOOLS_VERSION" \
  	&& find /usr/local \
  		\( -type d -a -name test -o -name tests \) \
  		-o \( -type f -a -name '*.pyc' -o -name '*.pyo' \) \
  		-exec rm -rf '{}' + \
  	&& cd / \
  	&& rm -rf /usr/src/python ~/.cache

  # make some useful symlinks that are expected to exist
  RUN cd /usr/local/bin \
  	&& ln -sf pip3 pip \
  	&& { [ -e easy_install ] || ln -s easy_install-* easy_install; } \
  	&& ln -sf idle3 idle \
  	&& ln -sf pydoc3 pydoc \
  	&& ln -sf python3 python \
  	&& ln -sf python3-config python-config

  # set PYTHONPATH to point to dist-packages
  ENV PYTHONPATH /usr/lib/python3/dist-packages:$PYTHONPATH
  ENV FLASK_APP=test.py

  RUN curl -SLO "https://raw.githubusercontent.com/balena-io-library/base-images/8accad6af708fca7271c5c65f18a86782e19f877/scripts/assets/tests/test-stack@python.sh" \
  && echo "Running test-stack@python" \
  && chmod +x test-stack@python.sh \
  && bash test-stack@python.sh \
  && rm -rf test-stack@python.sh \
  && pip install flask
###################################################
RUN [ ! -d /.balena/messages ] && mkdir -p /.balena/messages; echo 'Here are a few details about this Docker image (For more information please visit https://www.balena.io/docs/reference/base-images/base-images/): \nArchitecture: ARM v8 \nOS: Ubuntu xenial \nVariant: run variant \nDevice: Raspberry Pi 4 (using 64bit OS) \nDevice-type:raspberrypi4-64 \nDefault variable(s): UDEV=off \nThe following software stack is preinstalled: \nNode.js v13.12.0, Yarn v1.22.4 \nExtra features: \n- Easy way to install packages with `install_packages <package-name>` command \n- Run anywhere with cross-build feature  (for ARM only)' > /.balena/messages/image-info

RUN echo '#!/bin/sh.real\nbalena-info\nrm -f /bin/sh\ncp /bin/sh.real /bin/sh\n/bin/sh "$@"' > /bin/sh-shim \
	&& chmod +x /bin/sh-shim \
	&& cp /bin/sh /bin/sh.real \
	&& mv /bin/sh-shim /bin/sh



# base image with node intalled
WORKDIR /usr/src/app
COPY package.json package.json

COPY test.py test.py

COPY . ./

RUN JOBS=MAX npm install --production --unsafe-perm && npm cache verify && rm -rf /tmp/*



#CMD ["npm", "start"]
CMD ["python", "test.py"]
